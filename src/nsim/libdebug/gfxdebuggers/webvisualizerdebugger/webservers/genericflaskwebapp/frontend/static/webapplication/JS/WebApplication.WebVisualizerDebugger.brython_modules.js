__BRYTHON__.VFS_timestamp = 1712374299505
__BRYTHON__.use_VFS = true
var scripts = {"$timestamp": 1712374299504, "WebApplication.webPages.WebVisualizerDebugger.debug.debug": [".py", "from browser import document, window, timer\n\nfrom .datamanager import DataManager\n\nimport WebApplication as App\n\njquery = window.jQuery\n\nclass Debug:\n   retries = 0\n   retryTimer = None\n   \n   updateinterval_data = 300 # ms\n   updateinterval_display = 200 # ms\n   \n   updateIntervalLoop = None\n   \n   dataFetches = 0\n   dataFetch_LayerInterval = 10\n   dataFetchIntervalLoop = None\n   \n   class Flags:\n      FUNCTION_NONE   = 1\n      FUNCTION_TOGGLE = 2\n      FUNCTION_OFF    = 4\n      FUNCTION_ON     = 8\n   \n   functionality_index_active = 1\n   functionality_mappings     = {\n      0 : [\n             1, # primary   : Flags.FUNCTION_NONE\n             2, # secondary : Flags.FUNCTION_TOGGLE\n          ],\n      1 : [\n             2, # primary   : Flags.FUNCTION_TOGGLE\n             2, # secondary : Flags.FUNCTION_TOGGLE\n             # dblclick.BUG: 1, # secondary : Flags.FUNCTION_NONE\n          ],\n      2 : [\n             4, # primary   : Flags.FUNCTION_OFF\n             8, # secondary : Flags.FUNCTION_ON\n          ],\n      3 : [\n             8, # primary   : Flags.FUNCTION_ON\n             4, # secondary : Flags.FUNCTION_OFF\n          ],\n   }\n   \n   cardStripIdentifier = None\n   cardMetaItemIdentifier = None\n   \n   noSocketMessage = (\n      'No sockets found !'\n      + '<BR /><BR />Create some socket(s) first, to debug (and visualize).'\n   )\n   debugRetrieveErrorMessage = (\n      'Error retrieving debug information.'\n      + '<BR /><BR />Please check your internet connection.'\n   )\n   \n   def entry (event=None):\n      layout_cardstrip = App.webInterface.TemplateManager.getTemplate(\n         'layout.content.card.strip',\n      )\n      layout_carditem = App.webInterface.TemplateManager.getTemplate(\n         'layout.content.card.item',\n      )\n      \n      content_header = App.webInterface.TemplateManager.getTemplate(\n         'content.debug.card.header',\n      )\n      content_footer = App.webInterface.TemplateManager.getTemplate(\n         'content.debug.card.footer',\n      )\n      content_footer_item_meta = App.webInterface.TemplateManager.getTemplate(\n         'content.debug.card.footer.item.meta',\n      )\n      content_body_layer = App.webInterface.TemplateManager.getTemplate(\n         'content.debug.card.body.slab.layer',\n      )\n      content_body_queues = App.webInterface.TemplateManager.getTemplate(\n         'content.debug.card.body.slab.queues',\n      )\n      \n      if (None in (\n            layout_cardstrip, layout_carditem,\n            content_header, content_footer,\n            content_footer_item_meta,\n            content_body_layer, content_body_queues,\n         )):\n         return False\n      \n      data = DataManager.state_socket_retrieve(\n         index = 0,\n         queue = False,\n      )\n      \n      if (not (\n         data\n         or DataManager.state_sockets\n      )):\n         return False\n      \n      if (DataManager.state_sockets):\n         Debug.showconfiguration()\n      else:\n         jquery(\n            App.webPages.PageStructure.contentBlockIdentifier\n         ).html(Debug.noSocketMessage)\n      \n      return True\n   \n   def exit (event=None):\n      try:\n         timer.clear_timeout(Debug.retryTimer)\n         Debug.retryTimer = None\n      except:\n         Debug.retryTimer = None\n      \n      try:\n         timer.clear_interval(Debug.updateIntervalLoop)\n         Debug.updateIntervalLoop = None\n      except:\n         Debug.updateIntervalLoop = None\n      \n      try:\n         timer.clear_interval(Debug.dataFetchIntervalLoop)\n         Debug.dataFetchIntervalLoop = None\n      except:\n         Debug.dataFetchIntervalLoop = None\n      \n      DataManager.index_sockets_visible.clear()\n      \n      return True\n   \n   def showconfiguration (event=None):\n      layout_cardstrip = App.webInterface.TemplateManager.getTemplate(\n         'layout.content.card.strip',\n      )\n      layout_carditem = App.webInterface.TemplateManager.getTemplate(\n         'layout.content.card.item',\n      )\n      \n      content_header = App.webInterface.TemplateManager.getTemplate(\n         'content.debug.card.header',\n      )\n      content_footer = App.webInterface.TemplateManager.getTemplate(\n         'content.debug.card.footer',\n      )\n      content_footer_item_meta = App.webInterface.TemplateManager.getTemplate(\n         'content.debug.card.footer.item.meta',\n      )\n      content_body_layer = App.webInterface.TemplateManager.getTemplate(\n         'content.debug.card.body.slab.layer',\n      )\n      content_body_queues = App.webInterface.TemplateManager.getTemplate(\n         'content.debug.card.body.slab.queues',\n      )\n      \n      try:\n         timer.clear_timeout(Debug.retryTimer)\n         Debug.retryTimer = None\n      except:\n         Debug.retryTimer = None\n      \n      if (None in (\n            layout_cardstrip, layout_carditem,\n            content_header, content_footer,\n            content_footer_item_meta,\n            content_body_layer, content_body_queues,\n         )):\n         if (Debug.retries < App.Configuration.failureMaxRetries):\n            Debug.retries += 1\n            \n            Debug.retryTimer = timer.set_timeout(\n               Debug.showconfiguration,\n               App.Configuration.failureRefreshInterval,\n            )\n            \n            return None\n         else:\n            Debug.retries = 0\n            jquery(\n               App.webPages.PageStructure.contentBlockIdentifier\n            ).html(Debug.debugRetrieveErrorMessage)\n            \n            Debug.showConnectionError(Debug.showconfiguration)\n            return None\n         \n         return None\n      else:\n         pass\n      \n      data = DataManager.state_socket_retrieve(\n         index = 0,\n         queue = False,\n      )\n      \n      if (not data):\n         if (data is None):\n            if (Debug.retries < App.Configuration.failureMaxRetries):\n               Debug.retries += 1\n               \n               Debug.retryTimer = timer.set_timeout(\n                  Debug.showconfiguration,\n                  App.Configuration.failureRefreshInterval,\n               )\n               \n               return None\n            else:\n               Debug.retries = 0\n               jquery(\n                  App.webPages.PageStructure.contentBlockIdentifier\n               ).html(DataManager.dataRetrieveErrorMessage)\n               \n               Debug.showConnectionError(Debug.showconfiguration)\n               return None\n         else:\n            Debug.retries = 0\n            jquery(\n               App.webPages.PageStructure.contentBlockIdentifier\n            ).html(DataManager.dataRetrieveErrorMessage)\n            return False\n      else:\n         Debug.retries = 0\n      \n      if (not DataManager.state_sockets):\n         jquery(\n            App.webPages.PageStructure.contentBlockIdentifier\n         ).html(Debug.noSocketMessage)\n         \n         return None\n      \n      Debug.cardStripIdentifier = (\n         '.content-card-strip.debug-card-strip'\n      )\n      \n      Debug.cardMetaItemIdentifier = (\n         Debug.cardStripIdentifier\n         + ' .debug-card-meta-item.debug-card-meta-item-index-0'\n      )\n      \n      carditem_meta_content = App.webInterface.TemplateManager.render(\n         layout_carditem,\n         itemaddonclasses='{0}'.format(\n            'debug-card-meta-item debug-card-meta-item-index-0',\n         ),\n         \n         headeraddonclasses='',\n         headerbody=(\n            'INFO | META CONTROL'\n         ),\n         \n         bodyaddonclasses='',\n         mainbody=(\n              'click.single: perform function.primary'\n            + '<BR /><BR />'\n            + 'click.double: perform function.secondary'\n            + '<BR /><BR />'\n            + 'meta.click.single: cards.all (perform function.primary)'\n            + '<BR /><BR />'\n            + 'meta.click.double: alter functions (primary, secondary)'\n         ),\n         \n         footeraddonclasses='',\n         footerbody=App.webInterface.TemplateManager.render(\n            content_footer_item_meta,\n            primaryaddonclasses='',\n            primarybody=Debug.resolve_meta_info_str(secondary=False),\n            \n            secondaryaddonclasses='',\n            secondarybody=Debug.resolve_meta_info_str(secondary=True),\n         ),\n      )\n      \n      jquery(\n         App.webPages.PageStructure.contentBlockIdentifier\n      ).html(\n         App.webInterface.TemplateManager.render(\n            layout_cardstrip,\n            columnshortlimit=1,\n            columnlimit=3,\n            addonclasses='debug-card-strip',\n            content=carditem_meta_content, # load with card meta item in place\n         )\n      )\n      \n      jquery(\n         Debug.cardMetaItemIdentifier\n      ).on(\n         'click',\n         (lambda event=None, *args, alternate=False, index=int(\n               '0'\n            ), **kwargs: (\n            Debug.card_debug_functionality_alter(\n               event=event,\n               alternate=alternate,\n               index=index,\n            )\n         )),\n      )\n      jquery(\n         Debug.cardMetaItemIdentifier\n      ).on(\n         'dblclick',\n         (lambda event=None, *args, alternate=True, index=int(\n            '0'\n         ), **kwargs: (\n            Debug.card_debug_functionality_alter(\n               event=event,\n               alternate=alternate,\n               index=index,\n            )\n         )),\n      )\n      \n      DataManager.index_sockets_visible.clear()\n      \n      # R-Click = (btn.onmousedown -> [ event.which == 3 ]) | btn.oncontextmenu\n      \n      # complementaries: (primary -> secondary) | (click -> dblclick)\n      # on indie card::\n      # [0] None -> Toggle\n      # [1] Toggle -> Toggle (originally None, but changed due to dblclick bug)\n      # [2] On -> Off\n      # [3] Off -> On\n      # on 0 card::\n      # click = function(activeindex[0|1|2|3])\n      # dblclick: activeindex = ((activeindex + 1) % 4)\n      \n      for socket_index in DataManager.state_sockets.keys():\n         Debug._insert_socket_card(index=socket_index)\n      \n      Debug.updateIntervalLoop = timer.set_interval(\n         Debug._update_socket_cards,\n         Debug.updateinterval_display,\n      )\n      Debug.dataFetchIntervalLoop = timer.set_interval(\n         Debug._data_fetch_socket_cards,\n         Debug.updateinterval_data,\n      )\n      \n      return True\n   \n   def card_debug_functionality_alter (\n      event     = None,\n      alternate = False,\n      index     = 0,\n   ):\n      if (event is not None):\n         event.preventDefault()\n      \n      try:\n         index = int(index)\n      except:\n         index = 0\n      \n      if (\n             (index)\n         and (index not in DataManager.state_sockets.keys())\n      ):\n         return None\n      \n      if (\n             (not index)\n         and (alternate)\n      ):\n         Debug.functionality_index_active = (\n              (Debug.functionality_index_active + 1)\n            % (len(Debug.functionality_mappings.keys()))\n         )\n         \n         return None\n      \n      functionality = Debug.functionality_mappings.get(\n         Debug.functionality_index_active,\n      )\n      \n      if (functionality is None):\n         return None\n      \n      functionality = functionality[(\n         0\n         if (not alternate)\n         else\n         1\n      )]\n      \n      if (functionality & Debug.Flags.FUNCTION_NONE):\n         return None\n      elif (functionality & Debug.Flags.FUNCTION_TOGGLE):\n         activate = (\n            None\n            if (not index)\n            else (\n               False\n               if (DataManager.state_sockets.get(index).get('state'))\n               else\n               True\n            )\n         )\n         \n         DataManager.state_socket_alter(\n            index    = index,\n            activate = activate,\n         )\n      elif (functionality & Debug.Flags.FUNCTION_OFF):\n         DataManager.state_socket_alter(\n            index    = index,\n            activate = False,\n         )\n      elif (functionality & Debug.Flags.FUNCTION_ON):\n         DataManager.state_socket_alter(\n            index    = index,\n            activate = True,\n         )\n      else:\n         return None\n      \n      return None\n   \n   def _insert_socket_card (\n      event = None,\n      index = 0,\n   ):\n      if (\n            (index not in DataManager.state_sockets.keys())\n         or (index in DataManager.index_sockets_visible)\n      ):\n         return None\n      \n      layout_carditem = App.webInterface.TemplateManager.getTemplate(\n         'layout.content.card.item',\n      )\n      \n      content_header = App.webInterface.TemplateManager.getTemplate(\n         'content.debug.card.header',\n      )\n      content_footer = App.webInterface.TemplateManager.getTemplate(\n         'content.debug.card.footer',\n      )\n      content_body_layer = App.webInterface.TemplateManager.getTemplate(\n         'content.debug.card.body.slab.layer',\n      )\n      content_body_queues = App.webInterface.TemplateManager.getTemplate(\n         'content.debug.card.body.slab.queues',\n      )\n      \n      state_socket = DataManager.state_sockets.get(index)\n      \n      if (None in (\n            layout_carditem,\n            content_header, content_footer,\n            content_body_layer, content_body_queues,\n            state_socket,\n      )):\n         return None\n      \n      \n      if (state_socket.get('layers') is None):\n         '''\n         DataManager.state_socket_retrieve(\n            index = index,\n            queue = False,\n         )\n         '''\n         return None\n      \n      carditem_mainbody = list()\n      \n      for layer in (state_socket.get('layers') or []):\n         carditem_mainbody.extend([\n            App.webInterface.TemplateManager.render(\n               content_body_layer,\n               addonclasses='',\n               layerindex='{0}'.format(layer[0]),\n               layername='{0}'.format(layer[1]),\n            ),\n            App.webInterface.TemplateManager.render(\n               content_body_queues,\n               slabaddonclasses='',\n               queueindex='{0}'.format(layer[0]),\n            ),\n         ])\n      \n      try:\n         carditem_mainbody.pop()\n      except:\n         pass\n      \n      carditem_mainbody = ''.join(carditem_mainbody)\n      \n      jquery(\n         Debug.cardStripIdentifier\n      ).append(\n         App.webInterface.TemplateManager.render(\n            layout_carditem,\n            itemaddonclasses='{0}{1}'.format(\n               'debug-card-item debug-card-item-index-{0}'.format(\n                  state_socket.get('index'),\n               ),\n               (\n                  ' debug-default-index'\n                  if (state_socket.get('index') == DataManager.default_index)\n                  else\n                  ''\n               ),\n            ),\n            \n            headeraddonclasses='',\n            headerbody=App.webInterface.TemplateManager.render(\n               content_header,\n               addonclasses=(\n                  'debug-index-active'\n                  if (state_socket.get('state'))\n                  else\n                  ''\n               ),\n               indexbody='{0:02}'.format(\n                  state_socket.get('index'),\n               ),\n            ),\n            \n            bodyaddonclasses='',\n            mainbody=carditem_mainbody,\n            \n            footeraddonclasses='',\n            footerbody=App.webInterface.TemplateManager.render(\n               content_footer,\n               modeaddonclasses='',\n               modebody=(\n                  state_socket.get('mode')\n                  or 'mode.unknown'\n               ),\n               \n               stateaddonclasses='',\n               statebody=DataManager.resolve_status_str(\n                  status=(state_socket.get('status') or 0),\n               ),\n            ),\n         )\n      )\n      \n      DataManager.index_sockets_visible.append(state_socket.get('index'))\n      \n      jquery((\n         Debug.cardStripIdentifier\n         + ' .debug-card-item.debug-card-item-index-{0}'.format(\n            state_socket.get('index'),\n         )\n      )).on(\n         'click',\n         (lambda event=None, *args, alternate=False, index=(\n               int('{0}'.format(state_socket.get('index')))\n            ), **kwargs: (\n               Debug.card_debug_functionality_alter(\n                  event=event,\n                  alternate=alternate,\n                  index=index,\n               )\n         )),\n      )\n      jquery((\n         Debug.cardStripIdentifier\n         + ' .debug-card-item.debug-card-item-index-{0}'.format(\n            state_socket.get('index'),\n         )\n      )).on(\n         'dblclick',\n         (lambda event=None, *args, alternate=True, index=(\n               int('{0}'.format(state_socket.get('index')))\n            ), **kwargs: (\n               Debug.card_debug_functionality_alter(\n                  event=event,\n                  alternate=alternate,\n                  index=index,\n               )\n         )),\n      )\n      \n      return None\n   \n   def _update_socket_cards (event=None):\n      if (not DataManager.state_sockets):\n         return None\n      \n      for index in list(\n           set(DataManager.state_sockets.keys())\n         - set(DataManager.index_sockets_visible)\n      ):\n         Debug._insert_socket_card(index=index)\n      \n      # Meta Info Card : UPDATE\n      jquery((\n         Debug.cardMetaItemIdentifier\n         + ' .debug-meta-function-primary'\n      )).text(\n         '{0}'.format(\n            Debug.resolve_meta_info_str(secondary=False),\n         )\n      )\n      jquery((\n         Debug.cardMetaItemIdentifier\n         + ' .debug-meta-function-secondary'\n      )).text(\n         '{0}'.format(\n            Debug.resolve_meta_info_str(secondary=True),\n         )\n      )\n      \n      # Remove\n      # debug-default-index\n      jquery((\n         Debug.cardStripIdentifier\n         + ' .debug-card-item.debug-default-index'\n      )).removeClass(\n         'debug-default-index'\n      )\n      \n      # debug-index-active\n      jquery((\n         Debug.cardStripIdentifier\n         + ' .debug-card-item'\n         + ' .debug-index.debug-index-active'\n      )).removeClass(\n         'debug-index-active'\n      )\n      \n      # debug-queue-slot-active\n      jquery((\n         Debug.cardStripIdentifier\n         + ' .debug-card-item'\n         + ' .debug-queues-slab'\n         + ' .debug-queue-slot.debug-queue-slot-active'\n      )).removeClass(\n         'debug-queue-slot-active'\n      )\n      \n      # Update\n      \n      for index in DataManager.index_sockets_visible:\n         state_socket = DataManager.state_sockets.get(index)\n         \n         if (not state_socket):\n            continue\n         \n         # debug-index text\n         jquery((\n            Debug.cardStripIdentifier\n            + ' .debug-card-item.debug-card-item-index-{0}'.format(\n                  state_socket.get('index'),\n               )\n            + ' .debug-index'\n         )).text(\n            '{0:02}'.format(\n               state_socket.get('index'),\n            )\n         )\n         \n         # debug-mode text\n         jquery((\n            Debug.cardStripIdentifier\n            + ' .debug-card-item.debug-card-item-index-{0}'.format(\n                  state_socket.get('index'),\n               )\n            + ' .debug-mode'\n         )).text(\n            '{0}'.format((\n               state_socket.get('mode')\n               or 'mode.unknown'\n            ))\n         )\n         \n         # debug-state text\n         jquery((\n            Debug.cardStripIdentifier\n            + ' .debug-card-item.debug-card-item-index-{0}'.format(\n                  state_socket.get('index'),\n               )\n            + ' .debug-state'\n         )).text(\n            '{0}'.format(\n               DataManager.resolve_status_str(\n                  status=(state_socket.get('status') or 0),\n               ),\n            )\n         )\n         \n         if (state_socket.get('index') == DataManager.default_index):\n            # debug-default-index\n            jquery((\n               Debug.cardStripIdentifier\n               + ' .debug-card-item.debug-card-item-index-{0}'.format(\n                     state_socket.get('index'),\n                  )\n            )).addClass(\n               'debug-default-index'\n            )\n         \n         if (state_socket.get('state')):\n            # debug-index-active\n            jquery((\n               Debug.cardStripIdentifier\n               + ' .debug-card-item.debug-card-item-index-{0}'.format(\n                     state_socket.get('index'),\n                  )\n               + ' .debug-index'\n            )).addClass(\n               'debug-index-active'\n            )\n         \n         if (state_socket.get('queues') is not None):\n            # debug-queue-slot-active\n            for queue_index, queue_content in enumerate(\n               state_socket.get('queues')\n            ):\n               length_queue_row_1 = (int(queue_content[0]) or 0)\n               length_queue_row_2 = (int(queue_content[1]) or 0)\n               \n               if (length_queue_row_1 < 1):\n                  length_queue_row_1 = 0\n               \n               if (length_queue_row_1 > 7):\n                  length_queue_row_1 = 8\n               \n               if (length_queue_row_2 < 1):\n                  length_queue_row_2 = 0\n               \n               if (length_queue_row_2 > 7):\n                  length_queue_row_2 = 8\n               \n               # row 1\n               for slot_index in range(length_queue_row_1):\n                  jquery((\n                     Debug.cardStripIdentifier\n                     + ' .debug-card-item.debug-card-item-index-{0}'.format(\n                           state_socket.get('index'),\n                        )\n                     + ' .debug-queues-slab'\n                     + '.debug-queues-slab-index-{0}'.format(\n                           (queue_index + 1),\n                        )\n                     + ' .debug-queue-row.debug-queue-row-1'\n                     + ' .debug-queue-slot.debug-queue-slot-{0}'.format(\n                           (slot_index + 1),\n                        )\n                  )).addClass(\n                     'debug-queue-slot-active'\n                  )\n               \n               # row 2\n               for slot_index in range(length_queue_row_2):\n                  jquery((\n                     Debug.cardStripIdentifier\n                     + ' .debug-card-item.debug-card-item-index-{0}'.format(\n                           state_socket.get('index'),\n                        )\n                     + ' .debug-queues-slab'\n                     + '.debug-queues-slab-index-{0}'.format(\n                           (queue_index + 1),\n                        )\n                     + ' .debug-queue-row.debug-queue-row-2'\n                     + ' .debug-queue-slot.debug-queue-slot-{0}'.format(\n                           (slot_index + 1),\n                        )\n                  )).addClass(\n                     'debug-queue-slot-active'\n                  )\n      \n      return None\n   \n   def _data_fetch_socket_cards (event=None):\n      Debug.dataFetches += 1\n      \n      if (Debug.dataFetches >= Debug.dataFetch_LayerInterval):\n         Debug.dataFetches = 0\n      \n      if (not Debug.dataFetches):\n         DataManager.state_socket_retrieve(\n            index = 0,\n            queue = False,\n         )\n      else:\n         DataManager.state_socket_retrieve(\n            index = 0,\n            queue = True,\n         )\n      \n      return None\n   \n   def resolve_meta_info_str (\n      event     = None,\n      secondary = False,\n   ):\n      try:\n         seconday = bool(secondary)\n      except:\n         seconday = False\n      \n      functionality = Debug.functionality_mappings.get(\n         Debug.functionality_index_active\n      )\n      \n      if (not functionality):\n         return 'invalid configuration'\n      \n      functionality = functionality[(\n         0\n         if (not secondary)\n         else\n         1\n      )]\n      \n      if (functionality & Debug.Flags.FUNCTION_NONE):\n         return 'NONE'\n      elif (functionality & Debug.Flags.FUNCTION_TOGGLE):\n         return 'TOGGLE'\n      elif (functionality & Debug.Flags.FUNCTION_OFF):\n         return 'OFF'\n      elif (functionality & Debug.Flags.FUNCTION_ON):\n         return 'ON'\n      else:\n         return 'invalid configuration'\n      \n      return 'invalid configuration'\n   \n   def showConnectionError (reloadFunction=None):\n      App.webPages.PageStructure.showConnectionError(\n         body=DataManager.dataRetrieveErrorMessage,\n         reloadFunction=reloadFunction,\n      )\n", ["WebApplication.webPages.WebVisualizerDebugger.debug.datamanager.DataManager", "WebApplication.webPages", "browser.timer", "browser.document", "WebApplication.webPages.WebVisualizerDebugger", "browser.window", "WebApplication.webPages.WebVisualizerDebugger.debug", "WebApplication", "browser", "WebApplication.webPages.WebVisualizerDebugger.debug.datamanager"]], "WebApplication": [".py", "from .configuration import Configuration\n\nfrom . import (\n   core, webInterface, webPages,\n)\n\n__all__ = [\n   'Configuration',\n   'core',\n   'webInterface',\n   'webPages',\n]\n", ["WebApplication.webPages", "WebApplication.configuration.Configuration", "WebApplication", "WebApplication.webInterface", "WebApplication.core", "WebApplication.configuration"], 1], "WebApplication.webPages": [".py", "from .pageStructure import PageStructure\n\nfrom .WebVisualizerDebugger import AppStarter\n\nfrom . import (\n   WebVisualizerDebugger,\n)\n\n__all__ = [\n   'PageStructure',\n   \n   'AppStarter',\n   \n   'WebVisualizerDebugger',\n]\n", ["WebApplication.webPages", "WebApplication.webPages.WebVisualizerDebugger.AppStarter", "WebApplication.webPages.pageStructure", "WebApplication.webPages.WebVisualizerDebugger", "WebApplication", "WebApplication.webPages.pageStructure.PageStructure"], 1], "WebApplication.webPages.WebVisualizerDebugger": [".py", "from .appStarter import AppStarter\n\nfrom .home import Home\nfrom .developers import Developers\n\nfrom . import (\n   debug,\n)\n\n__all__ = [\n   'AppStarter',\n   \n   'Home',\n   'Developers',\n   \n   'debug',\n]\n", ["WebApplication.webPages.WebVisualizerDebugger.developers", "WebApplication.webPages.WebVisualizerDebugger.developers.Developers", "WebApplication.webPages", "WebApplication.webPages.WebVisualizerDebugger.home.Home", "WebApplication.webPages.WebVisualizerDebugger.appStarter.AppStarter", "WebApplication.webPages.WebVisualizerDebugger.home", "WebApplication.webPages.WebVisualizerDebugger", "WebApplication.webPages.WebVisualizerDebugger.appStarter", "WebApplication", "WebApplication.webPages.WebVisualizerDebugger.debug"], 1], "WebApplication.webPages.WebVisualizerDebugger.debug": [".py", "from .debug import Debug\n\n__all__ = [\n   'Debug',\n]\n", ["WebApplication.webPages.WebVisualizerDebugger.debug.debug", "WebApplication.webPages", "WebApplication.webPages.WebVisualizerDebugger.debug.debug.Debug", "WebApplication.webPages.WebVisualizerDebugger", "WebApplication", "WebApplication.webPages.WebVisualizerDebugger.debug"], 1], "WebApplication.webPages.WebVisualizerDebugger.home": [".py", "from browser import document, window, timer\n\nimport WebApplication as App\n\njquery = window.jQuery\n\nclass Home:\n   retries = 0\n   retryTimer = None\n   \n   offlineMessage = (\n        '<h1>!# Welcome to Web Visualizer Debugger (NSIM) #!</h1>'\n      + '</BR><BR/>'\n      + 'Looks like you\\'re offline !'\n      + '</BR>'\n      + 'Try checking server status !'\n   )\n   onlineMessage = (\n        '<BR />'\n      + '<h1> &lt; NSIM: Web Visualizer Debugger /&gt; </h1>'\n   )\n   connectionErrorMessage = (\n        'Error connecting to server.'\n      + '<BR /><BR />Please check your internet connection (or server status).'\n   )\n   \n   def entry (event=None):\n      jquery(\n         App.webPages.PageStructure.contentBlockIdentifier\n      ).html(Home.offlineMessage)\n      \n      try:\n         Home.graphics_display()\n      except:\n         pass\n      \n      return True\n   \n   def exit (event=None):\n      return True\n   \n   def graphics_display (event=None):\n      layout_graphic_item = App.webInterface.TemplateManager.getTemplate(\n         'layout.graphic.item',\n      )\n      \n      try:\n         timer.clear_timeout(Home.retryTimer)\n         Home.retryTimer = None\n      except:\n         Home.retryTimer = None\n      \n      if (None in (\n            layout_graphic_item,\n         )):\n         if (Home.retries < App.Configuration.failureMaxRetries):\n            Home.retries += 1\n            \n            Home.retryTimer = timer.set_timeout(\n               Home.graphics_display,\n               App.Configuration.failureRefreshInterval,\n            )\n            \n            return None\n         else:\n            Home.retries = 0\n            jquery(\n               App.webPages.PageStructure.contentBlockIdentifier\n            ).html(Home.offlineMessage)\n            \n            Home.showConnectionError(Home.graphics_display)\n            return None\n         \n         return None\n      else:\n         pass\n      \n      graphics = [\n         'icon.dark.dark',\n         'icon.dark.transparent',\n         'icon.light.light',\n         'icon.light.transparent',\n         \n         'logo.dark.dark',\n         'logo.dark.transparent',\n         'logo.light.light',\n         'logo.light.transparent',\n      ]\n      \n      graphics = ' '.join([\n         App.webInterface.TemplateManager.render(\n            layout_graphic_item,\n            imageurl='{0}Images/{1}.png'.format(\n               App.Configuration.staticUrl,\n               graphic,\n            ),\n            alt='{0}'.format(\n               graphic,\n            ),\n            description='{0}'.format(\n               graphic,\n            ),\n         )\n         for graphic in graphics\n      ])\n      \n      jquery(\n         App.webPages.PageStructure.contentBlockIdentifier\n      ).html(\n         '{0}{1}'.format(\n            Home.onlineMessage,\n            (\n               '{0}{1}{0}{2}'.format(\n                  '<BR/><BR/>',\n                  'Icons &amp; Logos:<BR/>',\n                  graphics,\n               )\n               if (graphics)\n               else\n               ''\n            ),\n         )\n      )\n      \n      return None\n   \n   def showConnectionError (reloadFunction=None):\n      App.webPages.PageStructure.showConnectionError(\n         body=Home.connectionErrorMessage,\n         reloadFunction=reloadFunction,\n      )\n", ["browser.timer", "browser.document", "browser.window", "WebApplication", "browser"]], "WebApplication.core": [".py", "from .uapiManager import UAPIManager\nfrom .executor import Executor\n\n__all__ = [\n   'UAPIManager',\n   'Executor',\n]\n", ["WebApplication.core.uapiManager", "WebApplication.core.executor", "WebApplication.core.uapiManager.UAPIManager", "WebApplication", "WebApplication.core.executor.Executor", "WebApplication.core"], 1], "WebApplication.core.uapiManager": [".py", "import WebApplication as App\n\nclass UAPIManager:\n   endpoints = None\n   endpointMapping = None\n   apicodes = None\n   \n   apiUpdateRequestActive = None\n   \n   def start ():\n      UAPIManager.endpointMapping = {\n         'ajax': -1,\n         'websocket': 0,\n      }\n      UAPIManager.endpoints = [None for _ in UAPIManager.endpointMapping]\n      UAPIManager.apicodes = []\n      \n      UAPIManager.apiUpdateRequestActive = False\n      \n      UAPIManager.hit = App.webInterface.ConnectionManager.fetch\n   \n   def initialize ():\n      UAPIManager.apiCall(\n         apicode='api.getcodes',\n         callback=UAPIManager.updateAPICode,\n         quicksearch=False,\n         apicoderequest=True,\n         blocking=False,\n         timeout=10000,\n         caching=False,\n      )\n      UAPIManager.apiUpdateRequestActive = True\n   \n   def updateEndpoints (endpoints, connectionType=None):\n      if ((not connectionType)\n            or (connectionType not in UAPIManager.endpointMapping.keys())\n         ):\n         connectionType = App.webInterface.ConnectionManager.connectionType\n      \n      if (type(endpoints).__name__ not in ('tuple', 'list',)):\n         oEndpoints = endpoints\n         endpoints = [\n            None for _ in UAPIManager.endpointMapping.keys()\n         ]\n         endpoints[UAPIManager.endpointMapping[connectionType]] = oEndpoints\n      \n      for eMapValue in UAPIManager.endpointMapping.values():\n         UAPIManager.endpoints[eMapValue] = endpoints[eMapValue] or (\n            UAPIManager.endpoints[eMapValue] or None\n         )\n   \n   def getEndpoint (connectionType=None):\n      if ((not connectionType)\n            or (connectionType not in UAPIManager.endpointMapping.keys())\n         ):\n         connectionType = App.webInterface.ConnectionManager.connectionType\n      \n      return UAPIManager.endpoints[UAPIManager.endpointMapping[connectionType]]\n   \n   def updateAPICode (data):\n      UAPIManager.apiUpdateRequestActive = False\n      \n      if (data.get('status') == App.Configuration.STATUS_SUCCESS):\n         if (data.get('data')):\n            apicodes = UAPIManager.apicodes.copy()\n            apicodes.extend(data.get('data').get('apicodes') or [])\n            \n            UAPIManager.apicodes = list(set(apicodes))\n   \n   def createData (**kwargs):\n      return (dict(kwargs))\n   \n   def apiCall (apicode, data=None, callback=None, quicksearch=False,\n         apicoderequest=False, **kwargs,\n      ):\n      if (not data):\n         data = {'apicode': apicode,}\n      else:\n         if (type(data).__name__ == 'dict'):\n            data = {'apicode': apicode, 'data': data,}\n         else:\n            data = {'apicode': apicode, 'data': UAPIManager.createData(\n                  value=data,\n               ),\n            }\n      \n      if ((apicode not in UAPIManager.apicodes) and (not apicoderequest)):\n         if (not UAPIManager.apiUpdateRequestActive):\n            UAPIManager.apiCall(\n               apicode='api.getcodes',\n               callback=UAPIManager.updateAPICode,\n               quicksearch=False,\n               apicoderequest=True,\n               blocking=False,\n               timeout=10000,\n               caching=False,\n            )\n      \n      if ((callback) and (not callable(callback))):\n         return None\n      \n      if (quicksearch and (apicode not in UAPIManager.apicodes)):\n         if (callback):\n            callback(App.Configuration.apiErrorData.copy())\n            return None\n         else:\n            return App.Configuration.apiErrorData.copy()\n      elif (quicksearch and (apicode in UAPIManager.apicodes)):\n         return UAPIManager.hit(data=data, callback=callback, **kwargs)\n      else:\n         return UAPIManager.hit(data=data, callback=callback, **kwargs)\n", ["WebApplication"]], "WebApplication.webInterface.stateManager": [".py", "from browser import document, window\n\nimport WebApplication as App\n\njquery = window.jQuery\n\nclass StateManager:\n   popStateEnabled = None\n   pageUnloadEnabled = None\n   \n   stateOperators = None\n   \n   def start ():\n      StateManager.popStateEnabled = True\n      StateManager.pageUnloadEnabled = False\n      \n      StateManager.stateOperators = {\n         'push': window.history.pushState,\n         'replace': window.history.replaceState,\n      }\n      \n      window.history.replaceState(\n         {\n            'tab' : None,\n            'subtab' : None,\n            'loggedin' : False,\n            'title': '{0} - {1}'.format(\n               App.Configuration.appName,\n               (App.Configuration.applicationName\n                  if (not App.Configuration.subApplicationName)\n                  else (\n                     '{1} {0}'.format(\n                        App.Configuration.applicationName,\n                        App.Configuration.subApplicationName,\n                     )\n                  )\n               ),\n            ),\n         },\n         '{0} - {1}'.format(\n            App.Configuration.appName,\n            (App.Configuration.applicationName\n               if (not App.Configuration.subApplicationName)\n               else (\n                  '{1} {0}'.format(\n                     App.Configuration.applicationName,\n                     App.Configuration.subApplicationName,\n                  )\n               )\n            ),\n         ),\n         '{0}'.format(\n            App.Configuration.appUrl,\n         ),\n      )\n      \n      window.onpopstate = StateManager.onPopState\n      window.onbeforeunload = StateManager.onBeforeUnload\n   \n   def disablePopState ():\n      StateManager.popStateEnabled = False\n   \n   def enablePageUnload ():\n      StateManager.pageUnloadEnabled = True\n   \n   def unloadPage (link):\n      StateManager.pageUnloadEnabled = False\n      window.onbeforeunload = None\n      window.location.href = link\n      window.onbeforeunload = StateManager.onBeforeUnload\n   \n   def replaceState (*args, **kwargs):\n      StateManager.operateState('replace', *args, **kwargs)\n   \n   def pushState (*args, **kwargs):\n      StateManager.operateState('push', *args, **kwargs)\n   \n   def operateState (operation='push', state=None):\n      if (operation not in StateManager.stateOperators.keys()):\n         return None\n      \n      operableState = dict()\n      \n      if (state != None):\n         operableState['title'] = state.get('title')\n         operableState['tab'] = state.get('tab')\n         operableState['subtab'] = (\n            state.get('subtab')\n            if (state.get('tab') != None)\n            else None\n         )\n         operableState['loggedin'] = state.get('loggedin')\n      else:\n         operableState['title'] = document.title or (\n            '{0} - {1} | {2}'.format(\n               App.Configuration.appName,\n               (App.Configuration.applicationName\n                  if (not App.Configuration.subApplicationName)\n                  else (\n                     '{1} {0}'.format(\n                        App.Configuration.applicationName,\n                        App.Configuration.subApplicationName,\n                     )\n                  )\n               ),\n               (\n                  App.webInterface.Activator.activeTab.capitalize()\n                  + (\n                     ' > {0}'.format(\n                        App.webInterface.Activator.activeSubTab.capitalize(),\n                     )\n                     if (App.webInterface.Activator.activeSubTab != None)\n                     else ''\n                  )\n               ),\n            )\n         )\n         operableState['tab'] = App.webInterface.Activator.activeTab\n         operableState['subtab'] = App.webInterface.Activator.activeSubTab\n         operableState['loggedin'] = App.Configuration.loggedIn\n      \n      StateManager.stateOperators[operation](\n         {\n            'tab' : operableState.get('tab'),\n            'subtab' : operableState.get('subtab'),\n            'loggedin' : operableState.get('loggedin'),\n            'title' : operableState.get('title'),\n         },\n         operableState.get('title'),\n         '{0}'.format(\n            App.Configuration.appUrl\n            + (\n               '{0}/'.format(\n                  operableState.get('tab')\n                  + (\n                     '/{0}'.format(\n                        operableState.get('subtab'),\n                     )\n                     if (operableState.get('subtab') != None)\n                     else ''\n                  )\n               )\n               if (operableState.get('tab') != None)\n               else ''\n            ),\n         ),\n      )\n      \n      # document.title = '{0}'.format(title.capitalize(),)\n   \n   def onPopState (event):\n      try:\n         state = event['state'].to_dict()\n      except:\n         return None\n      \n      if (state != None and StateManager.popStateEnabled):\n         App.webInterface.Activator.activate(\n            tab=state.get('tab'),\n            subtab=state.get('subtab'),\n            popStateEvent=True,\n         )\n      elif (state != None and (not StateManager.popStateEnabled)):\n         StateManager.popStateEnabled = True\n         # StateManager.replaceState(state)\n         # StateManager.pushState()\n         StateManager.replaceState()\n      \n      return None\n   \n   def onBeforeUnload (event):\n      if (\n            (not StateManager.pageUnloadEnabled)\n            and (not App.webInterface.Activator.deactivate())\n         ):\n         event['returnValue'] = 'Are you sure you want to exit?'\n         event.preventDefault()\n         \n         return 'Are you sure you want to exit?'\n      else:\n         StateManager.pageUnloadEnabled = False\n", ["browser.window", "WebApplication", "browser.document", "browser"]], "WebApplication.webInterface": [".py", "from .activator import Activator\nfrom .connectionManager import ConnectionManager\nfrom .stateManager import StateManager\nfrom .templateManager import TemplateManager\n\n__all__ = [\n   'Activator',\n   'ConnectionManager',\n   'StateManager',\n   'TemplateManager',\n]\n", ["WebApplication.webInterface.templateManager", "WebApplication.webInterface.connectionManager", "WebApplication.webInterface.stateManager.StateManager", "WebApplication.webInterface.stateManager", "WebApplication", "WebApplication.webInterface.templateManager.TemplateManager", "WebApplication.webInterface.activator", "WebApplication.webInterface.connectionManager.ConnectionManager", "WebApplication.webInterface", "WebApplication.webInterface.activator.Activator"], 1], "WebApplication.webPages.WebVisualizerDebugger.appStarter": [".py", "import WebApplication as App\n\nclass AppStarter:\n   def start ():\n      App.Configuration.applicationName = 'WebVisualizerDebugger'\n      App.Configuration.subApplicationName = None\n      # App.Configuration.loggedIn = None\n      \n      App.Configuration.pageStructureType = 'topbar'\n      \n      App.webInterface.Activator.tabs = {\n         # 'default' : 'default-tabname',\n         # 'tabname' : exec_function(event),\n         # 'tabname' : [exit_function(event), enter_function(event),],\n         # 'tabname' : {\n         #    'default' : 'default-subtabname',\n         #    'subtabname' : exec_function(event),\n         #    'subtabname' : [exit_function(event), enter_function(event),],\n         # },\n         'default' : 'home',\n         'home' : [\n            App.webPages.WebVisualizerDebugger.Home.exit,\n            App.webPages.WebVisualizerDebugger.Home.entry,\n         ],\n         'developers' : [\n            App.webPages.WebVisualizerDebugger.Developers.exit,\n            App.webPages.WebVisualizerDebugger.Developers.entry,\n         ],\n         'debug' : [\n            App.webPages.WebVisualizerDebugger.debug.Debug.exit,\n            App.webPages.WebVisualizerDebugger.debug.Debug.entry,\n         ],\n      }\n      App.webInterface.Activator.hiddenTabs = {\n         # 'tabname' : None,\n         # 'tabname' : {\n         #    'subtabname' : None,\n         # },\n      }\n", ["WebApplication"]], "WebApplication.core.executor": [".py", "import WebApplication as App\n\nclass Executor:\n   def web_executor ():\n      App.core.UAPIManager.start()\n      App.webPages.PageStructure.start()\n      \n      App.webInterface.ConnectionManager.start()\n      App.webInterface.StateManager.start()\n      \n      App.webPages.PageStructure.initialize()\n      App.core.UAPIManager.initialize()\n", ["WebApplication"]], "WebApplication.webInterface.connectionManager": [".py", "from browser import window, timer\nfrom javascript import JSON\n\nimport WebApplication as App\n\njquery = window.jQuery\n\nclass ConnectionManager:\n   connectionType = None\n   \n   retries = None\n   retryTimer = None\n   \n   class DataHandler:\n      def __init__ (self, data=None, callback=None):\n         self.data = data\n         self.callback = callback\n      \n      def responseHandler (self, data):\n         self.data = data\n         \n         if (self.callback):\n            self.callback(data)\n         \n         return None\n      \n      def dataVerificationLoop (self, maxLoops=10000):\n         currentLoops = 0\n         \n         while (self.data == None):\n            currentLoops += 1\n            if (currentLoops >= maxLoops):\n               break\n         \n         return self.data\n   \n   def start ():\n      ConnectionManager.retries = 0\n      \n      ConnectionManager.connectionType = 'ajax'\n   \n   def ajaxResponseHandler (callback, data=None, textStatus=None):\n      try:\n         data = data.to_dict()\n         if (not data.get('status')):\n            data = None\n      except:\n         data = None\n      \n      if (not data):\n         return callback(App.Configuration.apiErrorData.copy())\n      else:\n         return callback(data)\n   \n   def ajaxRequestHandler (url, data, callback,\n         blocking, timeout, method, caching,\n      ):\n      jquery.ajax({\n         'url': url,\n         'method': method,\n         'cache': caching,\n         'async': (not blocking),\n         'timeout': timeout,\n         'data': JSON.stringify(data),\n         'contentType': 'application/json',\n      }).always(\n         lambda data, textStatus, *args, callback=callback: (\n            ConnectionManager.ajaxResponseHandler(\n               callback, data, textStatus,\n            )\n         )\n      )\n   \n   def fetch (endpoint=None, data='', callback=None,\n         blocking=App.Configuration.connectionBlocking,\n         timeout=App.Configuration.connectionTimeout,\n         method=App.Configuration.ajaxMethod,\n         caching=App.Configuration.ajaxCaching,\n         connectionType=None,\n      ):\n      if ((not connectionType) or (\n               connectionType not in App.core.UAPIManager.endpointMapping.keys()\n            )\n         ):\n         connectionType = ConnectionManager.connectionType\n      \n      if (\n            ((not blocking) and (not callback))\n            or (callback and (not callable(callback)))\n         ):\n         return None\n      \n      if (not endpoint):\n         endpoint = App.core.UAPIManager.getEndpoint(connectionType)\n      \n      if (connectionType == 'ajax'):\n         dataHandler = ConnectionManager.DataHandler(callback=callback)\n         ConnectionManager.ajaxRequestHandler(\n            url=endpoint,\n            data=data, callback=dataHandler.responseHandler,\n            blocking=blocking, timeout=timeout, method=method, caching=caching,\n         )\n         \n         dataResponse = None\n         \n         if (blocking):\n            dataResponse = dataHandler.dataVerificationLoop()\n         \n         dataResponse = dataResponse or dataHandler.data\n         \n         if (not blocking):\n            return dataResponse\n         \n         if (callback):\n            callback(dataResponse)\n            return None\n         else:\n            return dataResponse\n      else:\n         return None\n", ["javascript", "browser.timer", "javascript.JSON", "browser.window", "WebApplication", "browser"]], "WebApplication.webInterface.activator": [".py", "import WebApplication as App\n\nclass Activator:\n   tabs = {}\n   hiddenTabs = {}\n   \n   activeTab = None\n   activeSubTab = None\n   \n   def getTabList (listhidden=False):\n      return [\n         tab\n         for tab in Activator.tabs.keys()\n         if (\n               (tab != None) and (tab != '') and (tab != 'default')\n               and (\n                  (\n                     True\n                     if (tab not in Activator.hiddenTabs.keys())\n                     else (\n                        True\n                        if (\n                              type(Activator.hiddenTabs.get(tab)).__name__ in (\n                                 'dict',\n                              )\n                           )\n                        else False\n                     )\n                  )\n                  if (not listhidden)\n                  else True\n               )\n            )\n      ]\n   \n   def getSubTabList (tab, listhidden=False):\n      if (tab in Activator.getTabList(listhidden=listhidden)):\n         return [\n            subtab\n            for subtab in Activator.tabs.get(tab).keys()\n            if (\n                  (subtab != None) and (subtab != '')\n                  and (subtab != 'default')\n                  and (\n                     (\n                        False\n                        if (\n                              (tab in Activator.hiddenTabs.keys())\n                              and (Activator.hiddenTabs.get(tab) == None)\n                           )\n                        else (\n                           (subtab not in Activator.hiddenTabs.get(tab).keys())\n                           if (\n                                 (tab in Activator.hiddenTabs.keys())\n                                 and (type(\n                                       Activator.hiddenTabs.get(tab)\n                                    ).__name__ in (\n                                       'dict',\n                                    )\n                                 )\n                              )\n                           else True\n                        )\n                     )\n                     if (not listhidden)\n                     else True\n                  )\n               )\n         ]\n      \n      return []\n   \n   def deactivate ():\n      proceed = True\n      \n      try:\n         if (\n               (Activator.activeTab != None)\n               and (Activator.activeSubTab == None)\n            ):\n            if (\n                  type(\n                     Activator.tabs.get(Activator.activeTab)\n                  ).__name__ in ('tuple', 'list',)\n                  and callable(Activator.tabs.get(Activator.activeTab)[0])\n               ):\n               proceed = Activator.tabs.get(Activator.activeTab)[0]()\n         elif (\n               (Activator.activeTab != None)\n               and (Activator.activeSubTab != None)\n            ):\n            if (\n                  (\n                     type(\n                        Activator.tabs.get(Activator.activeTab)\n                     ).__name__ in ('dict',)\n                  )\n                  and (\n                     type(\n                        Activator.tabs.get(Activator.activeTab).get(\n                           Activator.activeSubTab,\n                        )\n                     ).__name__ in ('tuple', 'list',)\n                  )\n                  and callable(\n                     Activator.tabs.get(Activator.activeTab).get(\n                        Activator.activeSubTab,\n                     )[0]\n                  )\n               ):\n               proceed = Activator.tabs.get(Activator.activeTab).get(\n                  Activator.activeSubTab,\n               )[0]()\n         else:\n            proceed = True\n      except:\n         proceed = True\n      \n      return proceed\n   \n   def activate (event=None, tab=None, subtab=None, popStateEvent=False,\n         force=False, skipdeactivation=False, **kwargs,\n      ):\n      try:\n         if (tab in (None, 'default',)):\n            tab = Activator.tabs.get('default')\n            subtab = None\n         \n         if (tab not in Activator.tabs.keys()):\n            return None\n         \n         if (\n               callable(Activator.tabs.get(tab))\n               or (\n                  type(Activator.tabs.get(tab)).__name__ in (\n                     'tuple', 'list',\n                  )\n               )\n            ):\n            subtab = None\n         else:\n            if (subtab in (None, 'default',)):\n               subtab = Activator.tabs.get(tab).get('default')\n            \n            if (subtab not in Activator.tabs.get(tab).keys()):\n               return None\n            \n            if (not (\n                  callable(Activator.tabs.get(tab).get(subtab))\n                  or (\n                     type(Activator.tabs.get(tab).get(subtab)).__name__ in (\n                        'tuple', 'list',\n                     )\n                  )\n               )):\n               return None\n      except:\n         return None\n      \n      if (\n            (tab != Activator.activeTab)\n            or (\n               (tab == Activator.activeTab)\n               and (subtab != Activator.activeSubTab)\n            )\n            or (force)\n         ):\n         \n         if ((not skipdeactivation) and (not Activator.deactivate())):\n            App.webInterface.StateManager.replaceState()\n            return None\n         \n         activated = False\n         \n         try:\n            if (callable(Activator.tabs.get(tab))):\n               activated = Activator.tabs.get(tab)(event, **kwargs)\n            elif (\n                  (\n                     type(\n                        Activator.tabs.get(tab)\n                     ).__name__ in ('tuple', 'list',)\n                  )\n                  and callable(Activator.tabs.get(tab)[-1])\n               ):\n               activated = Activator.tabs.get(tab)[-1](event, **kwargs)\n            elif (\n                  (\n                     type(\n                        Activator.tabs.get(tab)\n                     ).__name__ in ('dict',)\n                  )\n                  and callable(Activator.tabs.get(tab).get(subtab))\n               ):\n               activated = Activator.tabs.get(tab).get(subtab)(event, **kwargs)\n            elif (\n                  (\n                     type(\n                        Activator.tabs.get(tab)\n                     ).__name__ in ('dict',)\n                  )\n                  and (\n                     type(Activator.tabs.get(tab).get(subtab)).__name__ in (\n                        'tuple', 'list',\n                     )\n                  )\n                  and callable(Activator.tabs.get(tab).get(subtab)[-1])\n               ):\n               activated = Activator.tabs.get(tab).get(subtab)[-1](\n                  event, **kwargs\n               )\n         except:\n            activated = False\n         \n         if (activated):\n            Activator.activeTab = tab\n            Activator.activeSubTab = subtab\n            \n            App.webPages.PageStructure.updateTabInfo()\n            \n            if (not popStateEvent):\n               App.webInterface.StateManager.pushState()\n            else:\n               App.webInterface.StateManager.replaceState()\n         else:\n            if ((not force) and (not skipdeactivation)):\n               Activator.activate(\n                  event=event,\n                  tab=Activator.activeTab, subtab=Activator.activeSubTab,\n                  popStateEvent=True, force=True, skipdeactivation=True,\n               )\n               return None\n            else:\n               App.webPages.PageStructure.enableModal(\n                  title='Tab activation error!', closebutton=True,\n                  body=(\n                     \"Unable to activate '{0}' tab.\".format(\n                        (\n                           tab.capitalize()\n                           if (not subtab)\n                           else '{0} > {1}'.format(\n                              tab.capitalize(), subtab.capitalize(),\n                           )\n                        ),\n                     )\n                     + '<BR /><BR />Please check your internet connection for '\n                     + 'it might be causing issue, though we can\\'t say it '\n                     + 'for sure.'\n                  ),\n                  show=True, autocloseTimeout=30000,\n               )\n            App.webInterface.StateManager.replaceState()\n         \n         return None\n      else:\n         return None\n", ["WebApplication"]], "browser": [".py", "", [], 1], "sys": [".py", "\nfrom _sys import *\nimport javascript\n\n_getframe=Getframe\n\nabiflags=0\n\ndef audit(event,*args):\n ''\n pass\n \nbrython_debug_mode=__BRYTHON__.debug\n\nbase_exec_prefix=__BRYTHON__.brython_path\n\nbase_prefix=__BRYTHON__.brython_path\n\nbuiltin_module_names=__BRYTHON__.builtin_module_names\n\nbyteorder='little'\n\ndont_write_bytecode=True\n\nexec_prefix=__BRYTHON__.brython_path\n\nexecutable=__BRYTHON__.brython_path+'/brython.js'\n\nargv=[__BRYTHON__.script_path]\n\n\ndef displayhook(value):\n if value is not None :\n  stdout.write(repr(value))\n  \ndef exit(i=None ):\n raise SystemExit('')\n \nclass flag_class:\n\n def __init__(self):\n  self.debug=0\n  self.inspect=0\n  self.interactive=0\n  self.optimize=0\n  self.dont_write_bytecode=0\n  self.no_user_site=0\n  self.no_site=0\n  self.ignore_environment=0\n  self.verbose=0\n  self.bytes_warning=0\n  self.quiet=0\n  self.hash_randomization=1\n  \nflags=flag_class()\n\nclass float_info:\n mant_dig=53\n max=javascript.Number.MAX_VALUE\n min=javascript.Number.MIN_VALUE\n radix=2\n \ndef getfilesystemencoding(*args,**kw):\n ''\n\n \n return 'utf-8'\n \ndef getfilesystemencodeerrors():\n return \"utf-8\"\n \ndef getrecursionlimit():\n return 200\n \ndef intern(string):\n return string\n \nclass int_info:\n bits_per_digit=30\n sizeof_digit=4\n \nmaxsize=2 **63 -1\n\nmaxunicode=1114111\n\nplatform=\"brython\"\n\nprefix=__BRYTHON__.brython_path\n\nversion='.'.join(str(x)for x in __BRYTHON__.version_info[:3])\nversion +=\" (default, %s) \\n[Javascript 1.5] on Brython\"\\\n%__BRYTHON__.compiled_date\nhexversion=0x030800f0\n\nclass _version_info:\n\n def __init__(self,version_info):\n  self.version_info=version_info\n  self.major=version_info[0]\n  self.minor=version_info[1]\n  self.micro=version_info[2]\n  self.releaselevel=version_info[3]\n  self.serial=version_info[4]\n  \n def __getitem__(self,index):\n  if isinstance(self.version_info[index],list):\n   return tuple(self.version_info[index])\n  return self.version_info[index]\n  \n def hexversion(self):\n  try :\n   return '0%d0%d0%d'%(self.major,self.minor,self.micro)\n  finally :\n   return '0%d0000'%(self.major)\n   \n def __str__(self):\n  _s=\"sys.version(major=%d, minor=%d, micro=%d, releaselevel='%s', \"\\\n  \"serial=%d)\"\n  return _s %(self.major,self.minor,self.micro,\n  self.releaselevel,self.serial)\n  \n def __eq__(self,other):\n  if isinstance(other,tuple):\n   return (self.major,self.minor,self.micro)==other\n   \n  raise Error(\"Error! I don't know how to compare!\")\n  \n def __ge__(self,other):\n  if isinstance(other,tuple):\n   return (self.major,self.minor,self.micro)>=other\n   \n  raise Error(\"Error! I don't know how to compare!\")\n  \n def __gt__(self,other):\n  if isinstance(other,tuple):\n   return (self.major,self.minor,self.micro)>other\n   \n  raise Error(\"Error! I don't know how to compare!\")\n  \n def __le__(self,other):\n  if isinstance(other,tuple):\n   return (self.major,self.minor,self.micro)<=other\n   \n  raise Error(\"Error! I don't know how to compare!\")\n  \n def __lt__(self,other):\n  if isinstance(other,tuple):\n   return (self.major,self.minor,self.micro)<other\n   \n  raise Error(\"Error! I don't know how to compare!\")\n  \n def __ne__(self,other):\n  if isinstance(other,tuple):\n   return (self.major,self.minor,self.micro)!=other\n   \n  raise Error(\"Error! I don't know how to compare!\")\n  \n  \n  \nversion_info=_version_info(__BRYTHON__.version_info)\n\nclass SimpleNamespace:\n\n def __init__(self,/,**kwargs):\n  self.__dict__.update(kwargs)\n  \n def __repr__(self):\n  items=(f\"{k}={v!r}\"for k,v in self.__dict__.items())\n  return \"{}({})\".format(\"namespace\",\", \".join(items))\n  \n def __eq__(self,other):\n  if isinstance(self,SimpleNamespace)and isinstance(other,SimpleNamespace):\n   return self.__dict__ ==other.__dict__\n  return NotImplemented\n  \nSimpleNamespace.__module__=\"types\"\n\nvi=_version_info(__BRYTHON__.implementation)\nimplementation=SimpleNamespace(name=\"brython\",\nversion=vi,\nhexversion=vi.hexversion(),\ncache_tag=None )\n\nclass _hash_info:\n\n def __init__(self):\n  self.width=32\n  self.modulus=2147483647\n  self.inf=314159\n  self.nan=0\n  self.imag=1000003\n  self.algorithm='siphash24'\n  self.hash_bits=64\n  self.seed_bits=128\n  cutoff=0\n  \n def __repr__(self):\n \n  return \"sys.hash_info(width=32, modulus=2147483647, inf=314159, \"\\\n  \"nan=0, imag=1000003, algorithm='siphash24', hash_bits=64, \"\\\n  \"seed_bits=128, cutoff=0)\"\n  \nhash_info=_hash_info()\n\nclass _float_info:\n ''\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n def __init__(self):\n  self.dig=15\n  self.epsilon=2 **-52\n  self.mant_dig=53\n  self.max=__BRYTHON__.max_float\n  self.max_exp=2 **10\n  self.max_10_exp=308\n  self.min=2 **(-1022)\n  self.min_exp=-1021\n  self.min_10_exp=-307\n  self.radix=2\n  self.rounds=1\n  self._tuple=(self.max,self.max_exp,self.max_10_exp,self.min,\n  self.min_exp,self.min_10_exp,self.dig,self.mant_dig,self.epsilon,\n  self.radix,self.rounds)\n  \n def __getitem__(self,k):\n  return self._tuple[k]\n  \n def __iter__(self):\n  return iter(self._tuple)\n  \nfloat_info=_float_info()\n\nwarnoptions=[]\n\ndef getfilesystemencoding():\n return 'utf-8'\n \n \n__stdout__=__BRYTHON__.stdout\n__stderr__=__BRYTHON__.stderr\n__stdin__=__BRYTHON__.stdin\n\n__excepthook__=excepthook\n", ["javascript", "_sys"]], "WebApplication.webPages.WebVisualizerDebugger.developers": [".py", "from browser import document, window, timer\n\nimport WebApplication as App\n\njquery = window.jQuery\n\nclass Developers:\n   def entry (event=None):\n      jquery(\n         App.webPages.PageStructure.contentBlockIdentifier\n      ).html(\n           '<h3>&lt; developer & designer /&gt;</h3><BR />'\n         + '<h4>Arunesh Gour</h4>'\n         + '<BR /><BR /><BR />'\n         + '<h3>[ software ]</h3><BR />'\n         + '<h5>Edition: Concept Prototype</h5><BR />'\n         + '<h5>License: MIT</h5><BR />'\n         + '<h5>Source : Free &amp; Open Source [ Github ]</h5><BR /><BR />'\n         + '<h5>Get it on github @ <a href=\"'\n         + 'https://github.com/Arunesh-Gour/nsim.project/'\n         + '\">github.com/Arunesh-Gour/nsim.project/'\n         + '</a> !</h5><BR />'\n      )\n      return True\n   \n   def exit (event=None):\n      return True\n", ["browser.timer", "browser.document", "browser.window", "WebApplication", "browser"]], "WebApplication.webInterface.templateManager": [".py", "import WebApplication as App\n\nclass TemplateManager:\n   templates = {}\n   \n   def getTemplate (template, defaultValue=None):\n      templateString = TemplateManager.templates.get(\n         template,\n         None,\n      )\n      \n      if (templateString != None):\n         return templateString\n      \n      try:\n         with open(\n               '{0}Templates/{1}.html'.format(\n                  App.Configuration.staticUrl,\n                  template,\n               )\n            ) as fh:\n            templateString = fh.read() or ''\n         \n         if (len(templateString) > 1):\n            TemplateManager.templates[template] = str(\n               templateString\n            )\n         else:\n            templateString = defaultValue\n      except:\n         templateString = defaultValue\n      \n      return templateString\n   \n   def render (template, **kwargs):\n      return template.format(**kwargs)\n", ["WebApplication"]], "browser.timer": [".py", "from browser import console,window\n\ndef wrap(func,*args):\n\n\n def f():\n  try :\n   return func(*args)\n  except Exception as exc:\n   msg=''\n   try :\n    if exc.args:\n     msg='{0.info}\\n{0.__class__.__name__}: {0.args[0]}'.format(exc)\n    else :\n     msg=str(exc)\n    import sys\n    sys.stderr.write(msg)\n   except Exception as exc2:\n    console.log(\"Error printing exception traceback\",exc2,func,\n    args,kw)\n return f\n \nclear_interval=window.clearInterval\n\nclear_timeout=window.clearTimeout\n\ndef set_interval(func,interval,*args):\n return window.setInterval(wrap(func,*args),interval)\n \ndef set_timeout(func,interval,*args):\n return int(window.setTimeout(wrap(func,*args),interval))\n \ndef request_animation_frame(func):\n return int(window.requestAnimationFrame(func))\n \ndef cancel_animation_frame(int_id):\n window.cancelAnimationFrame(int_id)\n \ndef set_loop_timeout(x):\n\n assert isinstance(x,int)\n __BRYTHON__.loop_timeout=x\n", ["browser.window", "sys", "browser.console", "browser"]], "WebApplication.webPages.pageStructure": [".py", "from browser import document, window, timer\n\nimport WebApplication as App\n\njquery = window.jQuery\n\nclass PageStructure:\n   identifier = None\n   loaded = None\n   \n   retries = None\n   retryTimer = None\n   \n   controlBarIdentifier = None\n   controlBarSelectionIdentifier = None\n   controlBarSelectedIdentifier = None\n   contentBlockIdentifier = None\n   informationModal = None\n   informationModalAutocloseTimer = None\n   informationModalHeaderIdentifier = None\n   informationModalBodyIdentifier = None\n   informationModalFooterIdentifier = None\n   \n   def start ():\n      App.webPages.AppStarter.start()\n      \n      '''\n      App.webInterface.Activator.tabs = {\n         # 'default' : 'default-tabname',\n         # 'tabname' : exec_function(event),\n         # 'tabname' : [exit_function(event), enter_function(event),],\n         # 'tabname' : {\n         #    'default' : 'default-subtabname',\n         #    'subtabname' : exec_function(event),\n         #    'subtabname' : [exit_function(event), enter_function(event),],\n         # },\n      }\n      App.webInterface.Activator.hiddenTabs = {\n         # 'tabname' : None,\n         # 'tabname' : {\n         #    'subtabname' : None,\n         # },\n      }\n      '''\n      \n      PageStructure.loaded = False\n      PageStructure.identifier = '#main-div'\n      \n      PageStructure.retries = 0\n      \n      PageStructure.controlbarIdentifier = '.controlbar-strip'\n      PageStructure.controlbarSelectionIdentifier = '.controlbar-select-btn'\n      PageStructure.contentBlockIdentifier = (\n         '.content-strip .content-strip-container .content-block'\n      )\n      PageStructure.controlbarSelectedIdentifier = (\n         '.controlbar-select-item:selected'\n      )\n      PageStructure.informationModalHeaderIdentifier = (\n         '.information-modal-header'\n      )\n      PageStructure.informationModalBodyIdentifier = (\n         '.information-modal-body'\n      )\n      PageStructure.informationModalFooterIdentifier = (\n         '.information-modal-footer'\n      )\n      \n      App.core.UAPIManager.updateEndpoints(\n         jquery(\"{0} .init-data #api-init-endpoint-websocket\".format(\n            PageStructure.identifier,\n         )).text() or None, 'websocket',\n      )\n      App.core.UAPIManager.updateEndpoints(\n         jquery(\"{0} .init-data #api-init-endpoint-ajax\".format(\n            PageStructure.identifier,\n         )).text() or None, 'ajax',\n      )\n      App.Configuration.appUrl = jquery(\n         \"{0} .init-data #app-url\".format(PageStructure.identifier,)\n      ).text()\n      App.Configuration.staticUrl = jquery(\n         \"{0} .init-data #static-url\".format(PageStructure.identifier,)\n      ).text()\n   \n   def initialize ():\n      pendingTab = jquery(\n         \"{0} .init-data #tab-name\".format(PageStructure.identifier,)\n      ).text() or 'default'\n      pendingSubTab = jquery(\n         \"{0} .init-data #subtab-name\".format(PageStructure.identifier,)\n      ).text() or 'default'\n      \n      jquery(\n         \"{0} .init-data\".format(PageStructure.identifier,)\n      ).remove()\n      \n      if (\n            (pendingTab != 'default')\n            and (pendingTab not in App.webInterface.Activator.getTabList(True))\n         ):\n         pendingTab = 'default'\n         pendingSubTab = 'default'\n      \n      PageStructure.load()\n      App.webInterface.Activator.activate(\n         event=None,\n         tab=pendingTab,\n         subtab=pendingSubTab,\n      )\n   \n   def updateTabInfo (autoload=False):\n      if ((not autoload) and (not PageStructure.loaded)):\n         return None\n      else:\n         PageStructure.load()\n      \n      jquery(\".navbar-tab-field.tab-full-name\").text(\n         (App.webInterface.Activator.activeTab or '-').capitalize(),\n      )\n      jquery(\".navbar-tab-field.tab-short-name\").text(\n         (App.webInterface.Activator.activeTab or '-').capitalize()[0],\n      )\n      jquery(\".navbar-tab-field.subtab-full-name\").text(\n         (App.webInterface.Activator.activeSubTab or '-').capitalize(),\n      )\n      jquery(\".navbar-tab-field.subtab-short-name\").text(\n         (App.webInterface.Activator.activeSubTab or '-').capitalize()[0],\n      )\n      \n      jquery(\".activator-active\").removeClass(\"activator-active\")\n      \n      if (App.webInterface.Activator.activeTab != None):\n         jquery(\n            \".activator-item-{0}\".format(App.webInterface.Activator.activeTab)\n         ).addClass(\"activator-active\")\n      \n      if (App.webInterface.Activator.activeSubTab != None):\n         jquery(\n            \".activator-item-{0}-{1}\".format(\n               App.webInterface.Activator.activeTab,\n               App.webInterface.Activator.activeSubTab,\n            )\n         ).addClass(\"activator-active\")\n   \n   def updateTitle (title=None, autoload=False):\n      if ((not autoload) and (not PageStructure.loaded)):\n         return None\n      else:\n         PageStructure.load()\n      \n      if (title == None):\n         title = '{0} - {1} | {2}'.format(\n            App.Configuration.appName,\n            (App.Configuration.applicationName\n               if (not App.Configuration.subApplicationName)\n               else (\n                  '{1} {0}'.format(\n                     App.Configuration.applicationName,\n                     App.Configuration.subApplicationName,\n                  )\n               )\n            ),\n            (\n               App.webInterface.Activator.activeTab.capitalize()\n               + (\n                  ' > {0}'.format(\n                     App.webInterface.Activator.activeSubTab.capitalize(),\n                  )\n                  if (App.webInterface.Activator.activeSubTab != None)\n                  else ''\n               )\n            ),\n         )\n      \n      document.title = title\n      jquery('.navbar-offcanvas-title').text(\n         title,\n      )\n   \n   def load (*args, **kwargs):\n      if (App.Configuration.pageStructureType == 'sidebar'):\n         return PageStructure.loadSidebar(*args, **kwargs)\n      elif (App.Configuration.pageStructureType == 'topbar'):\n         return PageStructure.loadTopbar(*args, **kwargs)\n      \n      return None\n   \n   def loadSidebar (force=False):\n      if ((not force) and (PageStructure.loaded)):\n         return None\n      \n      offcanvasStrip = App.webInterface.TemplateManager.getTemplate(\n         'layout.offcanvas.strip',\n      )\n      accordionItem_nosubtab = App.webInterface.TemplateManager.getTemplate(\n         'layout.offcanvas.accordion.item.nosubtab',\n      )\n      accordionItem = App.webInterface.TemplateManager.getTemplate(\n         'layout.offcanvas.accordion.item',\n      )\n      accordionItem_subtab = App.webInterface.TemplateManager.getTemplate(\n         'layout.offcanvas.accordion.item.subtab',\n      )\n      navbarStrip = App.webInterface.TemplateManager.getTemplate(\n         'layout.navbar.strip',\n      )\n      navbarLoginButton = App.webInterface.TemplateManager.getTemplate(\n         'layout.navbar.loginbutton',\n      )\n      navbarLogoutButton = App.webInterface.TemplateManager.getTemplate(\n         'layout.navbar.logoutbutton',\n      )\n      controlbarSelectionItem = App.webInterface.TemplateManager.getTemplate(\n         'layout.controlbar.selectionitem',\n      )\n      controlbarDashboardItem = App.webInterface.TemplateManager.getTemplate(\n         'layout.controlbar.dashboard.item',\n      )\n      controlbarStrip = App.webInterface.TemplateManager.getTemplate(\n         'layout.controlbar.strip',\n      )\n      sidebarItem_nosubtab = App.webInterface.TemplateManager.getTemplate(\n         'layout.sidebar.item.nosubtab',\n      )\n      sidebarItem = App.webInterface.TemplateManager.getTemplate(\n         'layout.sidebar.item',\n      )\n      sidebarItem_subtab = App.webInterface.TemplateManager.getTemplate(\n         'layout.sidebar.item.subtab',\n      )\n      contentStrip_sidebar = App.webInterface.TemplateManager.getTemplate(\n         'layout.content.strip.sidebar',\n      )\n      informationModalStrip = App.webInterface.TemplateManager.getTemplate(\n         'layout.information.modal.strip',\n      )\n      informationModal_title = (\n         App.webInterface.TemplateManager.getTemplate(\n            'layout.information.modal.title',\n         )\n      )\n      informationModal_closebutton = (\n         App.webInterface.TemplateManager.getTemplate(\n            'layout.information.modal.closebutton',\n         )\n      )\n      informationModal_selectionbutton = (\n         App.webInterface.TemplateManager.getTemplate(\n            'layout.information.modal.selectionbutton',\n         )\n      )\n      \n      try:\n         timer.clear_timeout(PageStructure.retryTimer)\n         PageStructure.retryTimer = None\n      except:\n         PageStructure.retryTimer = None\n      \n      if (None in (\n            offcanvasStrip, accordionItem_nosubtab, accordionItem,\n            accordionItem_subtab,\n            navbarStrip, navbarLoginButton, navbarLogoutButton,\n            controlbarSelectionItem, controlbarDashboardItem,\n            controlbarStrip,\n            sidebarItem_nosubtab, sidebarItem,\n            sidebarItem_subtab,\n            contentStrip_sidebar,\n            informationModalStrip,\n            informationModal_title,\n            informationModal_closebutton, informationModal_selectionbutton,\n         )):\n         if (PageStructure.retries < App.Configuration.failureMaxRetries):\n            PageStructure.retries += 1\n            \n            PageStructure.retryTimer = timer.set_timeout(\n               PageStructure.loadSidebar,\n               App.Configuration.failureRefreshInterval,\n            )\n            \n            return None\n         else:\n            PageStructure.retries = 0\n            return None\n         \n         return None\n      else:\n         PageStructure.retries = 0\n      \n      offcanvasbody = []\n      sidebarbody = []\n      \n      for tab in App.webInterface.Activator.getTabList():\n         if (\n               (\n                  type(App.webInterface.Activator.tabs.get(tab)).__name__ in (\n                     'tuple', 'list',\n                  )\n               )\n               or callable(App.webInterface.Activator.tabs.get(tab))\n            ):\n            offcanvasbody.append(\n               App.webInterface.TemplateManager.render(\n                  accordionItem_nosubtab,\n                  tabname=tab,\n                  ctabname=tab.capitalize(),\n               )\n            )\n            sidebarbody.append(\n               App.webInterface.TemplateManager.render(\n                  sidebarItem_nosubtab,\n                  tabimageurl='{0}Images/{1}.png'.format(\n                     App.Configuration.staticUrl,\n                     tab,\n                  ),\n                  tabname=tab,\n                  ctabname=tab.capitalize(),\n                  cshorttabname=tab.capitalize()[0],\n               )\n            )\n         elif (\n               type(App.webInterface.Activator.tabs.get(tab)).__name__ in (\n                  'dict',\n               )\n            ):\n            offcanvassubtabitems = []\n            sidebarsubtabitems = []\n            \n            for subtab in App.webInterface.Activator.getSubTabList(tab):\n               offcanvassubtabitems.append(\n                  App.webInterface.TemplateManager.render(\n                     accordionItem_subtab,\n                     tabname=tab,\n                     subtabname=subtab,\n                     csubtabname=subtab.capitalize(),\n                  )\n               )\n               sidebarsubtabitems.append(\n                  App.webInterface.TemplateManager.render(\n                     sidebarItem_subtab,\n                     tabname=tab,\n                     subtabname=subtab,\n                     csubtabname=subtab.capitalize(),\n                  )\n               )\n            \n            offcanvassubtabitems = ''.join(offcanvassubtabitems)\n            sidebarsubtabitems = ''.join(sidebarsubtabitems)\n            \n            offcanvasbody.append(\n               App.webInterface.TemplateManager.render(\n                  accordionItem,\n                  tabname=tab,\n                  ctabname=tab.capitalize(),\n                  subtabitems=offcanvassubtabitems,\n               )\n            )\n            sidebarbody.append(\n               App.webInterface.TemplateManager.render(\n                  sidebarItem,\n                  tabimageurl='{0}Images/{1}.png'.format(\n                     App.Configuration.staticUrl,\n                     tab,\n                  ),\n                  tabname=tab,\n                  ctabname=tab.capitalize(),\n                  cshorttabname=tab.capitalize()[0],\n                  subtabitems=sidebarsubtabitems,\n               )\n            )\n      \n      offcanvasbody = ''.join(offcanvasbody)\n      sidebarbody = ''.join(sidebarbody)\n      \n      jquery(PageStructure.identifier).html(\n         ''.join((\n            App.webInterface.TemplateManager.render(\n               offcanvasStrip,\n               title='{0} - {1}'.format(\n                  App.Configuration.appName,\n                  (App.Configuration.applicationName\n                     if (not App.Configuration.subApplicationName)\n                     else (\n                        '{1} {0}'.format(\n                           App.Configuration.applicationName,\n                           App.Configuration.subApplicationName,\n                        )\n                     )\n                  ),\n               ),\n               body=offcanvasbody,\n            ),\n            App.webInterface.TemplateManager.render(\n               navbarStrip,\n               tabname='-',\n               subtabname='-',\n               brandimageurl='{0}{1}'.format(\n                  App.Configuration.staticUrl,\n                  App.Configuration.brandImageUrl,\n               ),\n               rtoptabitems=(navbarLogoutButton\n                  if (App.Configuration.loggedIn)\n                  else navbarLoginButton\n               ),\n            ),\n            App.webInterface.TemplateManager.render(\n               controlbarStrip,\n               controlbaritems=App.webInterface.TemplateManager.render(\n                  controlbarDashboardItem,\n                  selectionitems='',\n               ),\n            ),\n            App.webInterface.TemplateManager.render(\n               contentStrip_sidebar,\n               sidebaritems=sidebarbody,\n               body='So now, the body has been loaded as well.',\n            ),\n            App.webInterface.TemplateManager.render(\n               informationModalStrip,\n               header='', body='', selectionitems='',\n            ),\n         ))\n      )\n      \n      return PageStructure.bindTabs()\n   \n   def loadTopbar (force=False):\n      if ((not force) and (PageStructure.loaded)):\n         return None\n      \n      offcanvasStrip = App.webInterface.TemplateManager.getTemplate(\n         'layout.offcanvas.strip',\n      )\n      accordionItem_nosubtab = App.webInterface.TemplateManager.getTemplate(\n         'layout.offcanvas.accordion.item.nosubtab',\n      )\n      accordionItem = App.webInterface.TemplateManager.getTemplate(\n         'layout.offcanvas.accordion.item',\n      )\n      accordionItem_subtab = App.webInterface.TemplateManager.getTemplate(\n         'layout.offcanvas.accordion.item.subtab',\n      )\n      navbarStrip = App.webInterface.TemplateManager.getTemplate(\n         'layout.navbar.strip',\n      )\n      navbarLoginButton = App.webInterface.TemplateManager.getTemplate(\n         'layout.navbar.loginbutton',\n      )\n      navbarLogoutButton = App.webInterface.TemplateManager.getTemplate(\n         'layout.navbar.logoutbutton',\n      )\n      topbarStrip = App.webInterface.TemplateManager.getTemplate(\n         'layout.topbar.strip',\n      )\n      topbarItem_nosubtab = App.webInterface.TemplateManager.getTemplate(\n         'layout.topbar.item.nosubtab',\n      )\n      topbarItem = App.webInterface.TemplateManager.getTemplate(\n         'layout.topbar.item',\n      )\n      topbarItem_subtab = App.webInterface.TemplateManager.getTemplate(\n         'layout.topbar.item.subtab',\n      )\n      contentStrip_nosidebar = App.webInterface.TemplateManager.getTemplate(\n         'layout.content.strip.nosidebar',\n      )\n      informationModalStrip = App.webInterface.TemplateManager.getTemplate(\n         'layout.information.modal.strip',\n      )\n      informationModal_title = (\n         App.webInterface.TemplateManager.getTemplate(\n            'layout.information.modal.title',\n         )\n      )\n      informationModal_closebutton = (\n         App.webInterface.TemplateManager.getTemplate(\n            'layout.information.modal.closebutton',\n         )\n      )\n      informationModal_selectionbutton = (\n         App.webInterface.TemplateManager.getTemplate(\n            'layout.information.modal.selectionbutton',\n         )\n      )\n      \n      try:\n         timer.clear_timeout(PageStructure.retryTimer)\n         PageStructure.retryTimer = None\n      except:\n         PageStructure.retryTimer = None\n      \n      if (None in (\n            offcanvasStrip, accordionItem_nosubtab, accordionItem,\n            accordionItem_subtab,\n            navbarStrip, navbarLoginButton, navbarLogoutButton,\n            topbarStrip, topbarItem_nosubtab, topbarItem,\n            topbarItem_subtab,\n            contentStrip_nosidebar,\n            informationModalStrip,\n            informationModal_title,\n            informationModal_closebutton, informationModal_selectionbutton,\n         )):\n         if (PageStructure.retries < App.Configuration.failureMaxRetries):\n            PageStructure.retries += 1\n            \n            PageStructure.retryTimer = timer.set_timeout(\n               PageStructure.loadTopbar,\n               App.Configuration.failureRefreshInterval,\n            )\n            \n            return None\n         else:\n            PageStructure.retries = 0\n            return None\n         \n         return None\n      else:\n         PageStructure.retries = 0\n      \n      offcanvasbody = []\n      topbarbody = []\n      \n      for tab in App.webInterface.Activator.getTabList():\n         if (\n               (\n                  type(App.webInterface.Activator.tabs.get(tab)).__name__ in (\n                     'tuple', 'list',\n                  )\n               )\n               or callable(App.webInterface.Activator.tabs.get(tab))\n            ):\n            offcanvasbody.append(\n               App.webInterface.TemplateManager.render(\n                  accordionItem_nosubtab,\n                  tabname=tab,\n                  ctabname=tab.capitalize(),\n               )\n            )\n            topbarbody.append(\n               App.webInterface.TemplateManager.render(\n                  topbarItem_nosubtab,\n                  tabname=tab,\n                  ctabname=tab.capitalize(),\n               )\n            )\n         elif (\n               type(App.webInterface.Activator.tabs.get(tab)).__name__ in (\n                  'dict',\n               )\n            ):\n            offcanvassubtabitems = []\n            topbarsubtabitems = []\n            \n            for subtab in App.webInterface.Activator.getSubTabList(tab):\n               offcanvassubtabitems.append(\n                  App.webInterface.TemplateManager.render(\n                     accordionItem_subtab,\n                     tabname=tab,\n                     subtabname=subtab,\n                     csubtabname=subtab.capitalize(),\n                  )\n               )\n               topbarsubtabitems.append(\n                  App.webInterface.TemplateManager.render(\n                     topbarItem_subtab,\n                     tabname=tab,\n                     subtabname=subtab,\n                     csubtabname=subtab.capitalize(),\n                  )\n               )\n            \n            offcanvassubtabitems = ''.join(offcanvassubtabitems)\n            topbarsubtabitems = ''.join(topbarsubtabitems)\n            \n            offcanvasbody.append(\n               App.webInterface.TemplateManager.render(\n                  accordionItem,\n                  tabname=tab,\n                  ctabname=tab.capitalize(),\n                  subtabitems=offcanvassubtabitems,\n               )\n            )\n            topbarbody.append(\n               App.webInterface.TemplateManager.render(\n                  topbarItem,\n                  tabname=tab,\n                  ctabname=tab.capitalize(),\n                  subtabitems=topbarsubtabitems,\n               )\n            )\n      \n      offcanvasbody = ''.join(offcanvasbody)\n      topbarbody = ''.join(topbarbody)\n      \n      jquery(PageStructure.identifier).html(\n         ''.join((\n            App.webInterface.TemplateManager.render(\n               offcanvasStrip,\n               title='{0} - {1}'.format(\n                  App.Configuration.appName,\n                  (App.Configuration.applicationName\n                     if (not App.Configuration.subApplicationName)\n                     else (\n                        '{1} {0}'.format(\n                           App.Configuration.applicationName,\n                           App.Configuration.subApplicationName,\n                        )\n                     )\n                  ),\n               ),\n               body=offcanvasbody,\n            ),\n            App.webInterface.TemplateManager.render(\n               navbarStrip,\n               tabname='-',\n               subtabname='-',\n               brandimageurl='{0}{1}'.format(\n                  App.Configuration.staticUrl,\n                  App.Configuration.brandImageUrl,\n               ),\n               rtoptabitems=(navbarLogoutButton\n                  if (App.Configuration.loggedIn)\n                  else navbarLoginButton\n               ),\n            ),\n            App.webInterface.TemplateManager.render(\n               topbarStrip,\n               body=topbarbody,\n            ),\n            App.webInterface.TemplateManager.render(\n               contentStrip_nosidebar,\n               body='So now, the body has been loaded as well.',\n            ),\n            App.webInterface.TemplateManager.render(\n               informationModalStrip,\n               header='', body='', selectionitems='',\n            ),\n         ))\n      )\n      \n      return PageStructure.bindTabs()\n   \n   def bindTabs ():\n      '''\n      jquery('.navbar-login-button').on(\n         'click',\n         (lambda event=None: print('login')),\n      )'''\n      jquery('.navbar-logout-button').on(\n         'click',\n         (lambda event=None, *args, **kwargs: (\n            PageStructure.userLogout(event, confirm=True)\n         )),\n      )\n      \n      for tab in App.webInterface.Activator.getTabList(True):\n         if (\n               (\n                  type(App.webInterface.Activator.tabs.get(tab)).__name__ in (\n                     'tuple', 'list',\n                  )\n               )\n               or callable(App.webInterface.Activator.tabs.get(tab))\n            ):\n            jquery('.activator-{0}-button'.format(tab)).on(\n               'click',\n               (\n                  lambda event=None, tab=tab: (\n                     App.webInterface.Activator.activate(event, tab)\n                  )\n               ),\n            )\n         elif (\n               type(App.webInterface.Activator.tabs.get(tab)).__name__ in (\n                  'dict',\n               )\n            ):\n            jquery('.activator-{0}-button'.format(tab)).on(\n               'click',\n               (\n                  lambda event=None, tab=tab: (\n                     App.webInterface.Activator.activate(event, tab)\n                  )\n               ),\n            )\n            for subtab in App.webInterface.Activator.getSubTabList(tab, True):\n               jquery('.activator-{0}-{1}-button'.format(tab, subtab)).on(\n                  'click',\n                  (\n                     lambda event=None, tab=tab, subtab=subtab: (\n                        App.webInterface.Activator.activate(event, tab, subtab)\n                     )\n                  ),\n               )\n      \n      PageStructure.informationModal = window.bootstrap.Modal.new(\n         jquery('.information-modal-strip')[0]\n      )\n      \n      PageStructure.loaded = True\n      \n      return True\n   \n   def disableControlbar ():\n      jquery(PageStructure.controlbarSelectionIdentifier).off()\n      jquery(PageStructure.controlbarSelectionIdentifier).html('')\n      \n      PageStructure.disableControlbarBack()\n      \n      jquery(PageStructure.controlbarIdentifier).addClass(\n         'd-none'\n      )\n   \n   def enableControlbar (selectionitems=None, changehandler=None):\n      if (selectionitems):\n         jquery(PageStructure.controlbarSelectionIdentifier).html(\n            selectionitems\n         )\n      \n      if (callable(changehandler)):\n         jquery(PageStructure.controlbarSelectionIdentifier).on(\n            'change',\n            changehandler,\n         )\n      \n      jquery(PageStructure.controlbarIdentifier).removeClass(\n         'd-none'\n      )\n   \n   def disableControlbarBack ():\n      jquery(PageStructure.controlbarIdentifier + ' .back-button').off()\n      jquery(PageStructure.controlbarIdentifier + ' .back-button').addClass(\n         'd-none'\n      )\n   \n   def enableControlbarBack (backhandler=None):\n      jquery(PageStructure.controlbarIdentifier + ' .back-button').removeClass(\n         'd-none'\n      )\n      \n      if (callable(backhandler)):\n         jquery(PageStructure.controlbarIdentifier + ' .back-button').on(\n            'click',\n            backhandler,\n         )\n   \n   def enableModal (title=None, closebutton=None, body=None,\n         selectionitems=None, show=None, autocloseTimeout=None,\n      ):\n      informationModal_title = (\n         App.webInterface.TemplateManager.getTemplate(\n            'layout.information.modal.title',\n         )\n      )\n      informationModal_closebutton = (\n         App.webInterface.TemplateManager.getTemplate(\n            'layout.information.modal.closebutton',\n         )\n      )\n      \n      if (None in (\n            informationModal_title, informationModal_closebutton,\n         )):\n         return None\n      \n      header = []\n      \n      if (title):\n         header.append(\n            App.webInterface.TemplateManager.render(\n               informationModal_title,\n               title=title,\n            )\n         )\n      \n      if (closebutton):\n         header.append(\n            App.webInterface.TemplateManager.render(\n               informationModal_closebutton,\n            )\n         )\n      \n      header = ''.join(header)\n      \n      if (header):\n         jquery(PageStructure.informationModalHeaderIdentifier).html(header)\n      \n      if (body):\n         jquery(PageStructure.informationModalBodyIdentifier).html(body)\n      \n      if (selectionitems):\n         jquery(PageStructure.informationModalFooterIdentifier).html(\n            selectionitems\n         )\n      \n      if (show):\n         PageStructure.showModal(autocloseTimeout=autocloseTimeout)\n   \n   def showModal (autocloseTimeout=None):\n      try:\n         timer.clear_timeout(PageStructure.informationModalAutocloseTimer)\n         PageStructure.informationModalAutocloseTimer = None\n      except:\n         PageStructure.informationModalAutocloseTimer = None\n      \n      if (not PageStructure.informationModal):\n         return None\n      \n      if (type(autocloseTimeout).__name__ == 'int'):\n         PageStructure.retryTimer = timer.set_timeout(\n            PageStructure.closeModal,\n            autocloseTimeout,\n         )\n      \n      PageStructure.informationModal.show()\n   \n   def closeModal (event=None):\n      try:\n         timer.clear_timeout(PageStructure.informationModalAutocloseTimer)\n         PageStructure.informationModalAutocloseTimer = None\n      except:\n         PageStructure.informationModalAutocloseTimer = None\n      \n      if (not PageStructure.informationModal):\n         return None\n      \n      PageStructure.informationModal.hide()\n      \n      jquery(PageStructure.informationModalHeaderIdentifier).html('')\n      jquery(PageStructure.informationModalBodyIdentifier).html('')\n      jquery(PageStructure.informationModalFooterIdentifier).html('')\n   \n   def showConnectionError (body=None, reloadFunction=None):\n      informationModal_selectionbutton = (\n         App.webInterface.TemplateManager.getTemplate(\n            'layout.information.modal.selectionbutton',\n         )\n      )\n      \n      PageStructure.enableModal(\n         title='Connection Error!', closebutton=True,\n         body=(body\n            or ('Can\\'t connect to internet!<BR /><BR />'\n                  + 'Please check your internet connection!'\n               )\n         ),\n         selectionitems=''.join((\n            (App.webInterface.TemplateManager.render(\n                  informationModal_selectionbutton,\n                  color='outline-success',\n                  name='reload',\n                  cname='Reload',\n               )\n               if (reloadFunction and callable(reloadFunction))\n               else ''\n            ),\n            App.webInterface.TemplateManager.render(\n               informationModal_selectionbutton,\n               color='outline-danger',\n               name='close',\n               cname='Close',\n            ),\n         )),\n         show=True, autocloseTimeout=40000,\n      )\n      \n      if (reloadFunction and callable(reloadFunction)):\n         jquery('.information-modal-selection-reload-button').on(\n            'click',\n            (lambda event=None, *args, **kwargs: (\n               (PageStructure.closeModal() and False)\n               or reloadFunction()\n            )),\n         )\n      \n      jquery('.information-modal-selection-close-button').on(\n         'click',\n         (lambda event=None, *args, **kwargs: (\n            PageStructure.closeModal()\n         )),\n      )\n   \n   def userLogout (event=None, confirm=None):\n      if (not confirm):\n         return None\n      \n      if (not App.webInterface.Activator.deactivate()):\n         return None\n      \n      data = App.core.UAPIManager.apiCall(\n         'user.logout',\n         blocking=True,\n      )\n      \n      if (data.get('status') != App.Configuration.STATUS_SUCCESS):\n         App.webPages.PageStructure.showConnectionError(\n            body=(\n               'Error while logging you out.'\n               + '<BR /><BR />Please check your internet connection.'\n            ),\n         )\n         \n         return None\n      \n      App.webInterface.StateManager.unloadPage(App.Configuration.appUrl)\n      \n      return True\n", ["browser.timer", "browser.document", "browser.window", "WebApplication", "browser"]], "WebApplication.webPages.WebVisualizerDebugger.debug.datamanager": [".py", "import WebApplication as App\n\nclass DataManager:\n   default_index = 0\n   state_sockets = dict()\n   \n   index_sockets_visible = list()\n   \n   dataRetrieveErrorMessage = (\n      'Error retrieving sockets\\' data.'\n      + '<BR /><BR />Please check your internet connection.'\n   )\n   \n   class Flags:\n      STATUS_NONE          = 1\n      STATUS_OPEN          = 2\n      STATUS_BOUND         = 4\n      STATUS_CONNECTED     = 8\n   \n   def state_socket_retrieve (\n      event = None,\n      index = 0,\n      queue = False,\n   ):\n      try:\n         index = int(str(index).strip())\n      except:\n         index = 0\n      \n      data = App.core.UAPIManager.apiCall(\n         '{0}.state.current'.format((\n            'queue'\n            if (queue)\n            else\n            'socket'\n         )),\n         data=App.core.UAPIManager.createData(\n            index=index,\n         ),\n         blocking=True,\n      )\n      \n      if (data.get('status') != App.Configuration.STATUS_SUCCESS):\n         if (data.get('status') == App.Configuration.STATUS_CONNECTION_ERROR):\n            return None\n         else:\n            return False\n      \n      data = data.get('data')\n      \n      DataManager.default_index = data.get(\n         'default_index',\n      ) or DataManager.default_index or 0\n      \n      for state_socket in (data.get('sockets') or []):\n         if (not DataManager.state_sockets.get(\n            state_socket.get('index'),\n         )):\n            DataManager.state_sockets[\n               state_socket.get('index')\n            ] = dict()\n         \n         DataManager.state_sockets[\n            state_socket.get('index')\n         ]['index'] = state_socket.get('index')\n         DataManager.state_sockets[\n            state_socket.get('index')\n         ]['status'] = state_socket.get('status')\n         DataManager.state_sockets[\n            state_socket.get('index')\n         ]['state'] = state_socket.get('state')\n         DataManager.state_sockets[\n            state_socket.get('index')\n         ]['mode'] = state_socket.get('mode')\n         DataManager.state_sockets[\n            state_socket.get('index')\n         ][(\n            'queues'\n            if (queue)\n            else\n            'layers'\n         )] = state_socket.get((\n            'queues'\n            if (queue)\n            else\n            'layers'\n         ))\n      \n      return True\n   \n   def state_socket_alter (\n      event    = None,\n      index    = 0,\n      activate = None,\n   ):\n      try:\n         index = int(str(index).strip())\n      except:\n         index = 0\n      \n      if (activate is None):\n         pass\n         # activate = None\n      else:\n         try:\n            activate = bool(activate)\n         except:\n            activate = None\n      \n      if (\n             (index)\n         and (activate is None)\n      ):\n         return None\n      \n      data = App.core.UAPIManager.apiCall(\n         'socket.state.alter',\n         data=App.core.UAPIManager.createData(\n            index=index,\n            activate=activate,\n         ),\n         blocking=True,\n      )\n      \n      if (data.get('status') != App.Configuration.STATUS_SUCCESS):\n         if (data.get('status') == App.Configuration.STATUS_CONNECTION_ERROR):\n            return None\n         else:\n            return False\n      \n      data = data.get('data')\n      \n      return data\n   \n   def resolve_status_str (event=None, status=0):\n      try:\n         status = int(status)\n      except:\n         status = 0\n      \n      if (status & DataManager.Flags.STATUS_CONNECTED):\n         return 'connected'\n      elif (status & DataManager.Flags.STATUS_BOUND):\n         return 'open & bound'\n      elif (status & DataManager.Flags.STATUS_OPEN):\n         return 'open'\n      elif (status & DataManager.Flags.STATUS_NONE):\n         return 'closed'\n      else:\n         return 'status.unknown'\n      \n      return None\n", ["WebApplication"]], "WebApplication.configuration": [".py", "class Configuration:\n   appUrl = None\n   staticUrl = None\n   brandImageUrl = 'Images/logo.png'\n   \n   loggedIn = None\n   \n   appName = 'NSIM'\n   applicationName = None\n   subApplicationName = None\n   pageStructureType = None\n   \n   STATUS_SUCCESS = 'success'\n   STATUS_CONNECTION_ERROR = 'connection error'\n   \n   apiErrorData = {'status': 'connection error',}\n   \n   connectionBlocking = True\n   connectionTimeout = 3000 # int, msec\n   ajaxMethod = 'POST'\n   ajaxCaching = False\n   \n   failureMaxRetries = 3 # int, times\n   failureRefreshInterval = 1000 # int, msec\n   \n   statusPollingInterval = 1500 # int, msec\n", []]}
__BRYTHON__.update_VFS(scripts)